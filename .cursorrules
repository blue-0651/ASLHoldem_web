- 항상 한국어로 답변해주세요
- 사용자의 요구사항을 주의 깊게 철저히 따르세요.
- 먼저 단계별로 생각해 보세요. 무엇을 만들 것인지에 대한 계획을 의사코드로 자세히 기술해 보세요.
- 확인한 후 코드를 작성하세요!
- 항상 정확하고, 최신 상태이며, 버그가 없고, 완벽하게 작동하고, 안전하고, 성능이 뛰어나고 효율적인 코드를 작성하세요.
- 성능보다 가독성에 중점을 두세요.
- 요청된 모든 기능을 완벽하게 구현합니다.
- 할 일 목록, 대체 항목 또는 누락된 부분을 남기지 마세요.
- 코드가 완전한지 확인하세요! 완전히 완성되었는지 확인하세요.
- 필수 수입품을 모두 포함하고 주요 구성 요소의 적절한 명명을 확인하세요.
- 간결하게 작성하세요. 다른 산문은 최소화하세요.

# 프로젝트 개발 지침

## 코드 품질
- 모든 코드는 가독성을 최우선으로 작성할 것
- 중복 코드는 최소화하고 재사용 가능한 함수나 클래스로 분리할 것
- 모든 함수와 메서드는 단일 책임 원칙을 따를 것
- 변수와 함수 이름은 명확하고 의미있게 작성할 것
- 하드코딩된 값은 상수로 분리할 것

## 코드 스타일
- 프로젝트의 코딩 컨벤션을 일관되게 유지할 것
- 들여쓰기는 공백 2칸으로 통일할 것
- 한 줄의 길이는 80자를 넘지 않도록 할 것
- 클래스, 함수, 변수 명명 규칙을 준수할 것
- 주석은 코드가 '왜' 그렇게 작성되었는지 설명할 것

## 문서화
- 모든 공개 API에는 문서 주석을 작성할 것
- README 파일에 프로젝트 설정 및 실행 방법을 상세히 기술할 것
- 복잡한 알고리즘이나 비즈니스 로직은 별도 문서로 작성할 것
- 변경 사항은 CHANGELOG에 기록할 것
- API_Collection.json에 api 추가, 삭제, 업데이트 등 모든 변경사항을 반영하라. 그리고 샘플로 예제 파라미터와 주석을 추가하라.

## 테스트
- 모든 새로운 기능에는 단위 테스트를 작성할 것
- 테스트 커버리지는 최소 80% 이상 유지할 것
- 테스트는 독립적이고 반복 가능하게 작성할 것
- 중요한 사용자 흐름에 대한 통합 테스트를 구현할 것

## 보안
- 사용자 입력은 항상 검증하고 이스케이프 처리할 것
- 민감한 정보는 환경 변수나 보안 저장소에 보관할 것
- 외부 라이브러리는 보안 취약점을 정기적으로 점검할 것
- SQL 인젝션, XSS 등 일반적인 보안 취약점을 방지할 것

## 성능
- 데이터베이스 쿼리는 최적화할 것
- 불필요한 API 호출은 최소화할 것
- 대용량 데이터 처리 시 페이지네이션 적용할 것
- 리소스 집약적인 작업은 비동기 처리할 것

## 버전 관리
- 커밋 메시지는 명확하고 설명적으로 작성할 것
- 기능 개발은 별도 브랜치에서 진행할 것
- PR 전 코드 리뷰를 필수로 진행할 것
- 메인 브랜치는 항상 배포 가능한 상태로 유지할 것

## 프로젝트 구조
- 계층형 아키텍처를 기반으로 패키지 구조화할 것
- 각 패키지는 단일 책임을 가질 것
- 순환 의존성은 엄격히 금지할 것
- 도메인 중심 설계 원칙을 따를 것

- 모든 UI화면은 반응형 웹앱에 맞게 구현한다.
- frontend/mobile 경로에 사용자 매장 관리자, 일반 사용자에 관한 컨텐츠나 파일을 저장한다.
- 이미지들은 각각 상황에 맞게 사이즈가 늘거나 줄어야 한다. 
- 디자인 테마는 일정하게 고수하라.

- backend 실행시 반드시 가상환경(.venv)에서 실행하라.
- 질문 마지막에는 화이팅이라는 텍스트를 항상 추가해줘 
- 좌석권이라는 용어를 절대 쓰지말고 SEAT권이라는 용어로 써라